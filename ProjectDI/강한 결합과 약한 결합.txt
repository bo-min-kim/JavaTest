강한 결합(긴밀 결합)
객체의 의존 관계에서 강한 결합이란, 어떠한 객체가 다른 객체에 강한 의존성을 가지고 있음을 의미합니다.
"강한 결합"이라는 말은 의존 관계의 구현을 변경하려면 의존 중인 클래스 역시 변경이 되어야 함을 말합니다.

coupling01 패키지 참조하기
사람이 운동 경기 하는 내용을 클래스로 나타내면 다음과 같습니다.
Human 클래스의 멤버 변수 타입으로 Baseball 클래스가 존재하는 것을 확인할 수 있습니다.
언뜻 보면 별 문제가 없는 코드처럼 보이지만, 단점이 있습니다.

단점 01
Baseball 클래스가 없으면 Human 클래스를 정의할 수 없습니다.
Baseball 클래스를 다른 종류의 운동 클래스로 바꾸게 되면 Human 클래스의 코드 대부분이 변경 되기 때문입니다.

즉, Human 클래스가 Baseball 클래스에 의존하게 됩니다.
따라서, "Human 클래스가 Baseball 클래스에 의존성이 존재"함을 알 수 있습니다.

단점 02
Human 클래스 안의 Baseball 클래스를 Football 클래스로 변경하는 경우를 생각해 봅니다.
코드의 변화 내용을 살펴 보면, 멤버 변수 타입(클래스) 하나만 바꿨을 뿐인데 Human 클래스에 있는 대다수의 코드가 변경됩니다.
그렇기 때문에 "강한 결합"(강한 의존성)이라고 하는 것이며, 이는 유지 보수를 하는 측면에서 굉장히 좋지 않은 케이스라고 할 수 있습니다.

약한 결합(느슨한 결합)
객체 간의 강한 결합을 약화시켜 약한 결합을 이룰 수 있게 하는 방법은 인터페이스(Interface)입니다.

위와 같이 Sport 인터페이스를 만들어 추상 메소드 들을 정의합니다.
Baseball 클래스와 Football 클래스에서 추상 메소드들을 구현하게 하면, Baseball 오브젝트와 Football 오브젝트는 
모두 Sport 타입에 대입될 수 있으므로 Human 클래스에서 멤버 변수 타입을 Sport으로 지정할 수 있게 됩니다.

이는 Human 클래스 내부적으로 코드의 변경이 일어날 필요 없이, 생성자를 통해 객체를 받아 멤버 변수에 대입하기만 하면 오브젝트를 변경 가능하게 해줍니다.
즉, 강한 결합에서 벗어나 약한 결합을 이루게 해줍니다.

이는 유지 보수를 좀 더 수월하게 해주는 방법입니다.

정리
객체간의 강한 결합을 이루게 되면 멤버 변수에 대한 오브젝트 변경시 코드의 변경이 많이 일어나 유지 보수에 불리합니다.
인터페이스를 통해 약한 결합을 이루게 하여 유지 보수를 향상 시킵니다.

Java에서 객체간의 강한 결합과 약한 결합에 대해 살펴 보았습니다.
이는 Java뿐만 아니라 오브젝트를 지원하는 프로그래밍 언어라면 반드시 알아야 할 내용인 것 같습니다.
또한 이 개념은 Java 프레임워크인 Spring에서의 DI(의존성 주입), IoC(제어의 역전) 개념과 직결되는 내용입니다.
따라서, 정확한 개념을 잡고 넘어가는 것이 좋을 것 같습니다.